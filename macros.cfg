#[filament_switch_sensor switch_sensor]
#switch_pin: ^PG12
#pause_on_runout: True
#runout_gcode:
#  #PAUSE # [pause_resume] is required in printer.cfg
#  M600
#  M117 Filament switch runout
#insert_gcode:
#  M117 Filament switch inserted
  
#[filament_motion_sensor encoder_sensor]
#switch_pin: ^PG13
#detection_length: 8.64 # accuracy of motion sensor 2.88mm
#extruder: extruder
#pause_on_runout: False
#runout_gcode:
#  #PAUSE # [pause_resume] is required in printer.cfg
#  M600
#  M117 Filament encoder runout
#insert_gcode:
#  M117 Filament encoder inserted

[gcode_macro PURGE_AFTER_MMU_LOAD]
gcode:
  #M117 Purging Filament
  #MMU_SYNC_GEAR_MOTOR SYNC=1
  #_MMU_CLEAN_NOZZLE_WITH_EXTRUDE
  #G1 E50 F400
  BLOBIFIER
  #MMU_SYNC_GEAR_MOTOR SYNC=0
 
[delayed_gcode clear_display]
gcode:
  M117

[gcode_macro RED_LED]
gcode:
  SET_LED LED=caselight RED=1 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro GREEN_LED]
gcode:
  SET_LED LED=caselight RED=0 GREEN=1 BLUE=0 TRANSMIT=1

[gcode_macro BLUE_LED]
gcode:
  SET_LED LED=caselight RED=0 GREEN=0 BLUE=1 TRANSMIT=1


[gcode_macro WHITE_LED]
gcode:
  SET_LED LED=caselight RED=1 GREEN=1 BLUE=1 TRANSMIT=1
  SET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1

[gcode_macro LEDS_OFF]
gcode:
  STOP_LED_EFFECTS
  SET_LED LED=caselight RED=0 GREEN=0 BLUE=0 TRANSMIT=1


[gcode_macro CLEAN_NOZZLE_WITH_EXTRUDE]
variable_start_x: 350
variable_start_y: 350
variable_start_z: 1
variable_wipe_dist: -75
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   M117 Not Homed - Running G28 in CLEAN_NOZZLE
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X350 Y350 F6000
 G1 E50 F300
 G1 X{start_x} Y{start_y} F1500
 G1 Z{start_z} F1500

 M117 Cleaning Nozzle
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 M117 Raising Nozzle
 ## Raise nozzle
 G1 Z{raise_distance}
 G92 E0  ; Reset Extruder
 M117 


###############################
[gcode_macro _MMU_CLEAN_NOZZLE_WITH_EXTRUDE]
variable_start_x: 345
variable_start_y: 350
variable_start_z: 1
variable_wipe_dist: -90
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   M117 Not Homed - Running G28 in CLEAN_NOZZLE
   G28
 {% endif %}

 ## Lift MMU Servo so that filament can pass through
 #MMU_SERVO POS=UP
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X345 Y350 F6000
 G1 E100 F300
 G1 X{start_x} Y{start_y} F1500
 G1 Z{start_z} F1500

 M117 Cleaning Nozzle
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Put MMU Servo back to the DOWN position
 #MMU_SERVO POS=DOWN
 
 M117 Raising Nozzle
 ## Raise nozzle
 G1 Z{raise_distance}
 G92 E0  ; Reset Extruder
 M117 
###############################

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    #G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    #G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Screw_tilt_adjust if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro _TEST_PRINT_START]
gcode:
  {% set BED_TEMP = params.BED|default(55)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(215)|float %}
  STATUS_READY

  M140 S{BED_TEMP}
  G90

  STATUS_HOMING
  M190 S{BED_TEMP}

  M109 S200
  G92 E0
  G1 E-2 F5000
  G92 E0

  STATUS_HOMING
  G28
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL
  G28 Z
  STATUS_MESHING

  BED_MESH_CLEAR
  BED_MESH_CALIBRATE ADAPTIVE=1
  M109 S{EXTRUDER_TEMP}
  G92 E0
  G1 Z1.0 F3000
  STATUS_PRINTING

[gcode_macro PRINT_START]
gcode:
  # configure_extruder
  STATUS_READY                    
  G1 F6000 # Reset the feed rate so that it does not run slowly due to previous print being cancelled on the first layer.
  
  # This part fetches data from your slicer. Such as bed temp, extruder temp, caselight temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set BED = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set EXTRUDER = params.EXTRUDER|int %}
  {% set target_caselight = params.caselight|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Heat the bed to temp BEFORE homing. With Beacon Contact, the expanded bed causes for bad samples to be taken.
  M190 S{BED}
  #STATUS_HOMING  

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  M109 S{target_extruder}                                     # Heats the nozzle to temp from slicer
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  {% if printer.toolhead.homed_axes == "xyz" %}
    M118 Printer is already homed
  {% else %}
   M118 Printer needs homed...
   G28
  {% endif %}

  G90                   # Absolute position
  G0 Z2
  
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Clean Nozzle before doing QGL
  CLEAN_NOZZLE
  
  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  QUAD_GANTRY_LEVEL PROBE_METHOD=proximity               # Levels the buildplate via QGL
  G28 Z METHOD=CONTACT CALIBRATE=1                     # Homes Z again after QGL
  
  ##  Uncomment for bed mesh (2 of 2)
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE RUNS=2 PROBE_METHOD=proximity ADAPTIVE=1               # Starts bed mesh
  BED_MESH_PROFILE LOAD=default

  # Heats up the nozzle up to target via data from slicer
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  CLEAN_NOZZLE
  # G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  # G0 Z0.4                                          # Raises Z to 0.4
  # G91                                              # Incremental positioning 
  # G1 X100 E20 F1000                                # Purge line
  # G90                                              # Absolute position

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 330
variable_start_y: 350
variable_start_z: 1
variable_wipe_dist: -75
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   M117 Not Homed - Running G28 in CLEAN_NOZZLE
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X315 Y350 F6000
 #G1 E50 F300
 G1 X{start_x} Y{start_y} F1500
 G1 Z{start_z} F1500

 M117 Cleaning Nozzle
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 M117 Raising Nozzle
 ## Raise nozzle
 G1 Z{raise_distance}
 G92 E0  ; Reset Extruder
 M117 
 
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro QGL_RETRY]
description: "Quad Gantry Leveling with Retry"
gcode:
  {% set max_retries = 3 %}
  {% set retries = 0 %}
  {% set success = False %}
  
  {% for i in range(max_retries) %}
      {% set retries = retries + 1 %}
      G28
      M118 # Running QGL attempt {{ retries }}
      QGL
      {% if 'probe samples exceed sample_tolerance' not in printer.gcode_move.last_gcode_status.reason %}
          {% set success = True %}
          M118 # QGL successful on attempt {{ retries }}
          break
      {% else %}
          M118 # QGL failed on attempt {{ retries }}, retrying...
      {% endif %}
  {% endfor %}
  
  {% if not success %}
      M117 # QGL failed after {{ retries }} attempts, stopping print.
      M84
  {% else %}
      M117 # QGL completed successfully after {{ retries }} attempts, proceeding with print.
  {% endif %}
  
[gcode_macro QUAD_GANTRY_SCAN]
gcode:
	QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1.000
	QUAD_GANTRY_LEVEL horizontal_move_z=2